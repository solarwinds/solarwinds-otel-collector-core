govulncheck-version = v1.1.4
goversioninfo-version = v1.5.0

.PHONY: get-previous-tag
get-previous-tag:
	@git tag --sort=version:refname | grep -P '^v\d+\.\d+\.\d+$$' | tail -n 1

.PHONY: validate-release-uniqueness
validate-release-uniqueness:
	if ! gh release view "$(tag)" 2>&1 | grep -q "^release not found$$"; then \
		echo "Release $(tag) already exists on GitHub."; \
		exit 1; \
	fi

.PHONY: prepare-release
prepare-release:
	@$(SCRIPT_DIR)/prepare-release.sh $(version) "${PACKAGES_SOURCE_TO_UPDATE}"

.PHONY: create-github-release
create-github-release:
	@gh release create $(current_tag) \
		--title $(current_tag) \
		--generate-notes \
		--notes-start-tag $(previous_tag)

.PHONY: tag-github-packages
tag-github-packages:
	@$(SCRIPT_DIR)/tag-release-packages.sh "$(folders)" "$(tag)" "$(excluded_folders)"

.PHONY: ci-vulncheck-modules
ci-vulncheck-modules: install-all-go-packages
ci-vulncheck-modules:
	$(MAKE) govulncheck-modules

.PHONY: govulncheck-modules
govulncheck-modules:
	$(call print-target)
	@echo "Checking modules for vulnerabilities"
	@$(SCRIPT_DIR)/govulncheck-modules.sh

.PHONY: install-all-go-packages
install-all-go-packages:
	$(call print-target)
install-all-go-packages: install-goversioninfo
install-all-go-packages: install-vulncheck

.PHONY: install-vulncheck
install-vulncheck:
	$(call print-target)
	go install golang.org/x/vuln/cmd/govulncheck@$(govulncheck-version)

.PHONY: install-goversioninfo
install-goversioninfo:
	$(call print-target)
	cd ~ && GO111MODULE=on go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@$(goversioninfo-version) && cd - >/dev/null
